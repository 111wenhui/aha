
       目前正在做线上系统的架构升级，涉及到系统的重构，数据库的迁移，缓存的迁移。一开始，思想还停留在使用脚本去建表，跑数据的方法。
       经人提醒，现在的数据库使用的是采用了主从架构的mysql，所以，想到是否可以采用主从的思想，将新库先作为从库将数据进行同步，等数据同步之后，
    进行主从切换，将新库的一台机器升级为主库。在这个过程中个，也顺便了解了一下mysql的主从架构。
       首先，在数据库的操作中，我们主要可以分成两类操作，读和写。多个写成同时读是不会有问题的，但是，如果多个线程同时进行读写，那么就有可能造成
    数据不一致的问题。这个现象在我们使用多线程的时候普遍存在。同样，数据的读写也存在这个问题，自然的，锁这个概念自然也在数据库中存在。通常mysql数据库
    中有两种锁，共享锁和排它锁。而共享锁是一种读锁，所谓共享，就是同时可以允许多个人拥有，也可以允许多个共享锁同时存在。但是不能修改。mysql中增删改默认
    使用排它锁，这也从侧面佐证使用共享锁之后不能修改。
       mysql的存储引擎有两种，MyISAM和InnerDB，其不同在于，InnerDB支持事物并且使用行锁。mysql中的行锁，是对索引的锁定。如果没有索引，那么就会对
    全表进行加锁。
       mysql中的排它锁，自身可以进行增删改，其他线程不得进行任何操作，所以，在性能要求较高的系统中，出现读写分离，以求提高系统的性能。同时，将主库设置
    为写库，从库设置为从库。主从复制保证了数据的一致性。当然，也存在一定的延时，对于实时性要求较高的读操作，也需要衡量是否使用从库去读。事物好的一面必然
    伴随着阴影，所以才显得选择尤为重要，大部分的事情是具有共性的。
       说起主从复制，也对主从复制的远离进行了一些了解。我想，事情可以先从简单的一面入手，如果要我们对两个文件进行同步，如果我们只对一个文件进行写操作，
    另一个文件要进行同步，有什么方法呢，首先，我们需要知道对文件进行了哪些操作，尽量这些操作步骤，然后，在从文件上按照同样的顺序执行一边这种操作，那么
    必然，要记录我们执行这个操作文件的位置，不然，我们不知道每次都是从哪里开始，如果再从头开始一次，显然，主从文件不一样了，我们想要达到的效果是，主文件
    的操作过程，从文件按照原有的速度完整的执行一遍，这样，源头一样，过程一样，结果没有理由不一样，如果不一样，那么有可能是过程没有执行完整。那么，如果
    两个文件放在不同的机器上，就需要从文件有一个请求读取数据的IO线程，读取中间操作文件，主文件启动一个IO线程，接到请求，将操作文件读取出来返回给从文件
    的IO线程，从文件将读取到内容写到本机器上，然后，启动另一个线程读执行这些操作。以上，是主从复制异步的过程，那么，要实现同步复制，如果实现呢，如果我们
    写完主文件的同时，紧接著同时执行相同的操作到从文件，那么，虽然不是严格意义上的同步，实时性也是相当高了。要实现mysql的主从复制大致是这样的原理。事情远没有我想的那样复杂，没有空中楼阁，
    没人想到的或许只是我们没有去想。
        mysql的主从可以是一主一丛，一主多从，主主，多主一丛，联级复制。
        那么这样的架构设计有什么好处呢，首先，多台机器存储同一样的数据，一个常用的功能，就是备份，专业一点的说法就是实时灾备，也是高可用，一台出故障，另
    外一台马上顶上。同时，也是能提高性能，就是不做读写分离，多台机器的性能显然高过一台机器的性能，更何况，读写分离是依据特性的分离。
        所以，大致了解之后，在数据的问题也多一种思路。
       
